Implementacja systemu
=====================

Wstep
-----
W poprzednich rozdziałach opisano generalne zasady wg. których powinien funkcjonować symulator środowiska miejskiego przystosowany do współpracy z systemem fuzji danych. Wskazano czym powinien się cechować by dobrze spełniać stawiane przed nim zadania - w szczególności być w stanie zapewnić dane użyteczne z punktu widzenia prowadzenia badań nad systemem fuzji danych.
W tym zostanie omówiona implementacja takiego symulatora by pokać jak w praktyce można spełnić wymagania stawiane tego rodzaju aplikacjom, jakie problemy mogą zostać napotkane i jak można sobie z nimi radzić a także jakiego rodzaju technologie można zastosować do uzyskania określonych celów.
W dalszej części rozdziału zostana omówione ograniczenia tego rodzaju symulacji ze szczególnym uwzględnieniem ograniczeń wydajnościowych. Autor postara się zwrócić uwagę na największe ograniczenia takich systemów - czyli miejsca potencjalnej optymalizacji sposobu działania systemu jednocześnie zwracając uwagę na miejsca, które choć mogą wydawać się krytyczne z punktu widzenia symulacji przy konieczności współpracy z systemem fuzji danych przestają w ogóle odgrywać rolę z punktu widzenia wydajności.

Wymagania
---------
Tak jak i inne systemy informatyczne tak i ten, choć projektowany w ramach pracy inżynierskiej musiał spełniać pewne wymagania wynikające z możliwości jego późniejszego zastosowania do badań naukowych a w szczególności do pracy Pana Macieja Grzybka dotyczącej śledzenia obiektów w systemie fuzji danych (temat pracy: "Implementacja algorytmu sledzenia obiektów w systemie fuzji danych").
Poniżej opisano postawione systemowi wymagania:
 1. System powinien dostarczać informacje z czujników w mieście w formie wstępnie przetworzonej (na potrzeby fuzji informacji[?]).
 1. System powinien posiadać przynajmniej jeden typ czujnika, który dostarcza informacji w formie zawierającej conajmniej informację na temat współrzędnych geograficznych obiektu obserwowanego.
 1. System powinien udostępniać odczyty z czujników przy użyciu uzgodnionego schematu bazy danych dynamicznych (podział na bazę statyczną i dynamiczną wyjaśniony w rozdziale "Projekt bazy danych").
 1. System powinien mieć możliwość dodania implementacji bardziej zaawansowanych rodzajów czujników w szczególności posiadających inne właściwości obserwacji, dostarczające innych informacji czy też działające z określonym zaszumieniem.
 1. System powinien prezentować symulację w formie graficznej tak, by można było obserwować jej przebieg i konfrontować go organoleptycznie z wynikami dalszej analizy danych wyjściowych symulacji (ułatwienie dla wstępnej fazy prowadzenia badań).
 1. System powinien operować na danych dt. środowiska miejskiego pobranych z odpowiednio zdefiniowanej struktury bazy danych (wczytywanie map).
 1. System powinien umożliwiać regulację natęrzenia ruchu lub pozwalać na łatwe doimplementowanie tego rodzaju funkcjonalności w przyszłości.
 1. System powinien umożliwiać regulację szybkości symulacji względem czasu rzeczywistego (przyśpieszenie, spowolnienie).
 1. System poiwinien pozwalać na czasowe wstrzymanie symulacji.

Do dalszego projektowania przystąpiono mając na względzie powyższe wymagania.

Dobór metodyki symulacji
------------------------
### Skala symulacji 
### Upływ czasu

Dobór technologii
-----------------
### Wydajność
### Rozszerzalność
### Dostępność

Projekt bazy danych
-------------------

Architektura systemu
--------------------
### Model MVC
#### O modelu
#### Zastosowanie w aplikacji
### Wielowątkowość
#### Biblioteka boost::thread
#### Problemy synchronizacji
##### Kolejki komunikatów
##### Mutexy

Architektura modelu
-------------------
### Obiekty świata
### Iterakcja między obiektami
#### Wzorzec wizytatora
### Upływ czasu
#### Biblioteka boost::chrono 
#### Wzorzec obserwatora
### Połączenie z bazą danych
#### Biblioteka pqxx
#### ORM
### Interfejsy
#### Metody publiczne
#### Wołania asynchroniczne
#### Obserwacja stanu symulacji

Architektura widoku
-------------------
### Biblioteka Qt
#### Projektowanie interfejsu graficznego
#### QGraphiscLibrary
#### Wymagania bilioteki
#### Architektura Sygnał/Slot
### Własne widgety

Architektura kontrolera
-----------------------
(dlaczego po widoku? Bo SYGNAŁO-SLOTY muszą być wcześniej).
### Odcięcie biblioteki Qt
### Klasy zdarzeń i ich obsługa
#### Wzorzec wiytatora

